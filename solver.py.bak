import skimage
import skimage.io
import skimage.color
import skimage.measure
import skimage.feature
import skimage.filters
import skimage.transform
import pytesseract
import imutils
import matplotlib.pyplot as plt
import numpy as np
import time
    
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

def main():

    fig, axs = plt.subplots(ncols=8, nrows=4)
    fig.canvas.draw()
    axs_bg = [None]*4
    for i in range(4):
        axs_bg[i] = [None]*8
        for j in range(8):
            axs_bg[i][j] = fig.canvas.copy_from_bbox(axs[i][j].bbox)
    plt.show(block=False)

    controller = Controller("cnc")
    solver = Solver()
    
    # get initial image and detect the numbers
    image = solver.capture_image()
    numbers = solver.detect_numbers(image)
    
    # set initial numbers
    solver.set_numbers(numbers)
    
    # loop forever
    while True:
        
        # compute move
        move = solver.compute_move(numbers)
        
        # execute move on cnc
        controller.execute_move(move)
        
        # simulate move to get expected result
        numbers_expected = solver.simulate_move(move)
        
        # wait until the expected results appears on stream
        valid = False
        while not valid:
            # fake it
            if True:
                valid = True
                numbers = numbers_expected
                break
            # wait for new picture
            image = solver.capture_image()
            numbers_new = solver.detect_numbers(image)
            nSame = np.count_nonzero(numbers_new == numbers_expected)
            if(nSame == 15):
                numbers = numbers_new
                valid = True
            else:
                time.sleep(0.001)        
    
class Solver:
    def __init__(self):
        pass
        
    def capture_image(self):
        # capture image from live stream
        img = skimage.io.imread("2048-2.png")
        img = skimage.color.rgb2gray(img[:,:,0:3])
        img = skimage.transform.resize(img, (800, 800))
        return img
    
    def detect_numbers(self, image):
        # detect numbers on captured image
        numbers = np.zeros((4,4), dtype="int")
        for i in range(4):
            for j in range(4):
                    
                h = image.shape[0] 
                w = image.shape[1]
                
                y1 = int(h/4.0*i)
                y2 = int(h/4.0*(i+1))
                x1 = int(w/4.0*j)
                x2 = int(w/4.0*(j+1))
                    
                crop = image[y1:y2, x1:x2]
                edge = skimage.feature.canny(crop, sigma=2.5, high_threshold=0.01, low_threshold=0.01)
                
                for k in range(0, edge.shape[1], 1):
                    if(edge[edge.shape[0]//2,k]):
                        y1 = k+crop.shape[0]//10
                        break
                for k in range(0, edge.shape[0], 1):
                    if(edge[k, edge.shape[0]//2]):
                        x1 = k+crop.shape[1]//10
                        break
                for k in range(edge.shape[1]-1, -1, -1):
                    if(edge[edge.shape[0]//2,k]):
                        y2 = k-crop.shape[0]//10
                        break   
                for k in range(edge.shape[0]-1, -1, -1):
                    if(edge[k, edge.shape[0]//2]):
                        x2 = k-crop.shape[1]//10
                        break
                
                crop = crop[y1:y2, x1:x2]
                thresh = skimage.filters.threshold_otsu(crop)
                crop = ((crop > thresh)*255).astype("uint8")
                
                if(np.mean(crop) < 128):
                    crop = 255 - crop
                elif(np.mean(crop) > 250):
                    crop = np.ones_like(crop)*255
                
                axs[i,j].imshow(crop, cmap="gray", vmin=0, vmax=255)
                
                number = pytesseract.image_to_string(crop, config=' --psm 10 --oem 3 -c tessedit_char_whitelist=0123456789')
                if(number != ""):
                    numbers[i,j] = int(number)        
        return numbers
    
    def numbers_to_board(self, numbers):
        # convert numbers to board
        board = numbers.tolist()
        for i in range(4):
            for j in range(4):
                tval = board[i][j]
                if(tval == 0):
                    board[i][j] = 0
                else:
                    board[i][j] = int(round(math.log(tval, 2)))
        return board
        
    def compute_move(self, numbers):
        # compute best move
        board = self.numbers_to_board(numbers)
        return 0
    
    def set_board(self, numbers):
        board = self.numbers_to_board(numbers)